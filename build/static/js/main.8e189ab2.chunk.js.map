{"version":3,"sources":["components/store.js","components/User.js","components/Comment.js","components/CommentList/CommentList.js","components/Post/Post.js","components/PostList.js","components/FilterForm.js","components/loadingData.js","App.js","index.js"],"names":["getPosps","state","posts","getSearchText","searchForm","searchText","getSearchProps","searchProps","arguments","length","undefined","action","type","value","_objectSpread","store","createStore","User","_ref","name","username","email","address","react_default","a","createElement","className","concat","city","street","defaultProps","Comment","comment","components_User","body","CommentList","comments","map","currentComment","components_Comment","key","id","Post","title","user","components_CommentList_CommentList","connect","filtredPosts","filter","byField","post","includes","getFiltringFunk","Object","toConsumableArray","components_Post_Post","assign","currentSearch","dispatch","setFiterText","setSearchText","setFilterProps","setSearchProps","_useState","useState","_useState2","slicedToArray","searchInput","setSearch","_useState3","_useState4","searchByTitle","setByTitle","_useState5","_useState6","searchByBody","setByBody","handleChange","e","target","onSubmit","preventDefault","onBlur","onChange","htmlFor","checked","loadData","asyncToGenerator","regenerator_default","mark","_callee","url","response","data","wrap","_context","prev","next","fetch","sent","json","abrupt","stop","_x","apply","this","getPostsWithUsers","_ref2","_callee2","users","postsWithUsers","_context2","loadingData_objectSpread","find","person","userId","postId","loadPosts","loading","isLoaded","setLoading","onClick","loadButton","disabled","then","components_FilterForm","components_PostList","ReactDOM","render","es","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.8e189ab2.chunk.js","sourcesContent":["import { createStore } from 'redux';\n\n// action types\nconst LOADING = 'loading';\nconst SET_SEARCH_TEXT = 'set_search_text';\nconst SET_SEARCH_PROPS = 'set_search_props';\n\n// action creators\nexport const loading = value => ({ type: LOADING, value });\nexport const setSearchText = value => ({ type: SET_SEARCH_TEXT, value });\nexport const setSearchProps = value => ({ type: SET_SEARCH_PROPS, value });\n\n// selectors\n\nexport const getPosps = state => state.posts;\nexport const getSearchText = state => state.searchForm.searchText;\nexport const getSearchProps = state => state.searchForm.searchProps;\n\n// reducer\n\nconst posts = (state = [], action) => {\n  switch (action.type) {\n    case LOADING:\n      return action.value;\n    default:\n      return state;\n  }\n};\n\nconst searchForm = (state = {\n  searchText: '',\n  searchProps: 'title',\n}, action) => {\n  switch (action.type) {\n    case SET_SEARCH_TEXT:\n      return {\n        ...state,\n        searchText: action.value,\n      };\n    case SET_SEARCH_PROPS:\n      return {\n        ...state,\n        searchProps: action.value,\n      };\n    default:\n      return state;\n  }\n};\n\nconst reducer = (state = {}, action) => ({\n  posts: posts(state.posts, action),\n  searchForm: searchForm(state.searchForm, action),\n});\n\n// const initialState = {\n//   posts: [],\n//   searchForm: {\n//     searchText: '',\n//     searchProps: 'title',\n//   },\n// };\n\nconst store = createStore(reducer);\n\nexport default store;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst User = ({ name, username, email, address }) => (\n  <div className=\"post-page__user\">\n    {name}\n    {username && `(${username})`}\n    <br />\n    {email}\n    <br />\n    {address && `City: ${address.city}`}\n    <br />\n    {address && `Street: ${address.street}`}\n  </div>\n);\n\nUser.propTypes = {\n  name: PropTypes.string,\n  username: PropTypes.string,\n  email: PropTypes.string.isRequired,\n  address: PropTypes.shape({\n    city: PropTypes.string,\n    street: PropTypes.string,\n  }),\n};\n\nUser.defaultProps = {\n  name: null,\n  username: null,\n  address: null,\n};\n\nexport default User;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport User from './User';\n\nconst Comment = ({ comment }) => (\n  <div className=\"comment-list__comment\">\n    <User email={comment.email} />\n    <div>\n      <h4>{comment.name}</h4>\n      <p>{comment.body}</p>\n    </div>\n  </div>\n);\n\nComment.propTypes = {\n  comment: PropTypes.shape({\n    email: PropTypes.string.isRequired,\n    name: PropTypes.string,\n    body: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default Comment;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Comment from '../Comment';\nimport './commentlist.css';\n\nconst CommentList = ({ comments }) => (\n  <div className=\"comment-list\">\n    <h3>Comments</h3>\n    <div className=\"comment-list__body\">\n      {comments && comments.map(currentComment => (\n        <Comment comment={currentComment} key={currentComment.id} />))\n      }\n    </div>\n  </div>\n);\n\nCommentList.propTypes = {\n  comments: PropTypes.arrayOf(\n    PropTypes.shape({\n      email: PropTypes.string,\n      name: PropTypes.string,\n      body: PropTypes.string,\n    })\n  ),\n};\n\nCommentList.defaultProps = {\n  comments: null,\n};\n\nexport default CommentList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport User from '../User';\nimport CommentList from '../CommentList/CommentList';\nimport './post.css';\n\nconst Post = ({\n  title, body, comments, user,\n}) => (\n  <div className=\"post-page\">\n    <User {...user} />\n\n    <div className=\"post-page__post\">\n      <h2>{title}</h2>\n      <div>{body}</div>\n      <CommentList comments={comments} />\n    </div>\n  </div>\n);\n\nPost.propTypes = {\n  title: PropTypes.string.isRequired,\n  body: PropTypes.string.isRequired,\n  comments: PropTypes.arrayOf(\n    PropTypes.shape({\n      email: PropTypes.string,\n      name: PropTypes.string,\n      body: PropTypes.string,\n    })\n  ),\n  user: PropTypes.shape({\n    name: PropTypes.string,\n    username: PropTypes.string,\n    email: PropTypes.string,\n    address: PropTypes.object,\n  }).isRequired,\n};\n\nPost.defaultProps = {\n  comments: null,\n};\n\nexport default Post;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getPosps, getSearchProps, getSearchText } from './store';\nimport Post from './Post/Post';\n\nconst getFiltringFunk = (byField, value) => {\n  switch (byField) {\n    case 'body':\n      return post => post.body.includes(value);\n    case 'titlebody':\n      return post => post.title.includes(value) || post.body.includes(value);\n    default:\n      return post => post.title.includes(value);\n  }\n};\n\nconst PostList = ({ posts, searchText, searchProps }) => {\n  let filtredPosts = [];\n  if (searchText !== '') {\n    filtredPosts = posts.filter(getFiltringFunk(searchProps, searchText));\n  } else {\n    filtredPosts = [...posts];\n  }\n\n  return (\n    <div>\n      {\n        filtredPosts.map(post => (\n          <Post {...post} key={post.id} />\n        ))\n      }\n    </div>\n  );\n};\n\nPostList.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.shape({\n    title: PropTypes.string,\n    body: PropTypes.string,\n    comments: PropTypes.arrayOf(PropTypes.object),\n    id: PropTypes.number,\n    user: PropTypes.shape({\n      name: PropTypes.string,\n      username: PropTypes.string,\n      email: PropTypes.string.isRequired,\n      address: PropTypes.object,\n    }),\n  })).isRequired,\n  searchText: PropTypes.string.isRequired,\n  searchProps: PropTypes.string.isRequired,\n};\n\nconst getData = state => ({\n  posts: getPosps(state),\n  searchText: getSearchText(state),\n  searchProps: getSearchProps(state),\n});\n\nexport default connect(getData, {})(PostList);\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { getSearchText, setSearchText, setSearchProps } from './store';\n\nconst FilterForm = ({ currentSearch, setFilterProps, setFiterText }) => {\n  const [searchInput, setSearch] = useState(currentSearch);\n  const [searchByTitle, setByTitle] = useState('title');\n  const [searchByBody, setByBody] = useState('');\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (searchInput !== currentSearch) {\n      setFiterText(searchInput);\n    }\n  };\n\n  const handleChange = (e) => {\n    const { value } = e.target;\n\n    if (value === 'title') {\n      setByTitle(searchByTitle === '' ? 'title' : '');\n    } else {\n      setByBody(searchByBody === '' ? 'body' : '');\n    }\n\n    setFilterProps(searchByTitle + searchByBody);\n  };\n\n  const filterBlur = () => {\n    if (searchInput !== currentSearch) {\n      setFiterText(searchInput);\n    }\n  };\n\n  return (\n    <form\n      className=\"search-form\"\n      name=\"searchForm\"\n      action=\"\"\n      onSubmit={handleSubmit}\n    >\n      <input\n        className=\"search-form__input\"\n        name=\"searchInput\"\n        value={searchInput}\n        type=\"search\"\n        onBlur={filterBlur}\n        onChange={e => setSearch(e.target.value)}\n      />\n\n      <br />\n\n      <label htmlFor=\"checkTitle\">\n        <input\n          name=\"searchByTitle\"\n          type=\"checkbox\"\n          value=\"title\"\n          id=\"checkTitle\"\n          checked={searchByTitle === 'title'}\n          onChange={handleChange}\n        />\n        by post title\n      </label>\n\n      <label htmlFor=\"checkBody\">\n        <input\n          name=\"searchByBody\"\n          type=\"checkbox\"\n          value=\"body\"\n          id=\"checkBody\"\n          checked={searchByBody === 'body'}\n          onChange={handleChange}\n        />\n        by post text\n      </label>\n    </form>\n  );\n};\n\nFilterForm.propTypes = {\n  currentSearch: PropTypes.string.isRequired,\n  setFilterProps: PropTypes.func.isRequired,\n  setFiterText: PropTypes.func.isRequired,\n};\n\nconst getData = state => ({\n  currentSearch: getSearchText(state),\n});\n\nconst getMethods = dispatch => ({\n  setFiterText: value => dispatch(setSearchText(value)),\n  setFilterProps: value => dispatch(setSearchProps(value)),\n});\n\nexport default connect(\n  getData,\n  getMethods,\n)(FilterForm);\n","export const loadData = async(url) => {\n  const response = await fetch(url);\n  const data = await response.json();\n  return data;\n};\n\nexport const getPostsWithUsers = async() => {\n  const url = 'https://jsonplaceholder.typicode.com/';\n\n  const posts = await loadData(`${url}posts`);\n  const users = await loadData(`${url}users`);\n  const comments = await loadData(`${url}comments`);\n\n  const postsWithUsers = await posts.map(post => (\n    {\n      ...post,\n      user: users.find(person => person.id === post.userId),\n      comments: comments.filter(comment => post.id === comment.postId),\n    }\n  ));\n\n  return postsWithUsers;\n};\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport './App.css';\nimport { loading } from './components/store';\nimport PostList from './components/PostList';\nimport FilterForm from './components/FilterForm';\nimport { getPostsWithUsers } from './components/loadingData';\n\nconst App = ({ loadPosts }) => {\n  const [isLoaded, setLoading] = useState('Load');\n\n  const handleClick = (e) => {\n    const loadButton = e.target;\n\n    setLoading('Loading...');\n\n    loadButton.disabled = isLoaded === 'Loading...';\n\n    getPostsWithUsers().then((data) => {\n      loadPosts(data);\n      setLoading('Loaded');\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>List of posts</h1>\n      {\n        (isLoaded !== 'Loaded')\n          ? (\n            <button\n              type=\"button\"\n              className=\"load-button\"\n              onClick={handleClick}\n            >\n              {isLoaded}\n            </button>\n          )\n          : (\n            <div>\n              <FilterForm />\n              <PostList />\n            </div>\n          )\n      }\n    </div>\n  );\n};\n\nconst getMethods = dispatch => ({\n  loadPosts: value => dispatch(loading(value)),\n});\n\nexport default connect(null, getMethods)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport store from './components/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}