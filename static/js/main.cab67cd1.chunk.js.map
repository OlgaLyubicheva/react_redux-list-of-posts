{"version":3,"sources":["components/store.js","components/User.js","components/Comment.js","components/CommentList/CommentList.js","components/Post/Post.js","components/PostList.js","components/FilterForm.js","components/loadingData.js","App.js","index.js"],"names":["searchFields","getPosps","state","posts","getSearchText","searchForm","searchText","getSearchProps","searchProps","arguments","length","undefined","action","type","value","filter","post","id","map","_objectSpread","comments","comment","store","createStore","User","_ref","name","username","email","address","react_default","a","createElement","className","concat","city","street","defaultProps","connect","dispatch","deleteComment","delCom","components_User","body","onClick","CommentList","currentComment","components_Comment","key","Post","title","user","deletePost","components_CommentList_CommentList","delPost","filtredPosts","byField","includes","getFiltringFunk","Object","toConsumableArray","components_Post_Post","assign","currentSearch","currentSProp","setFiterText","setSearchText","setFilterProps","setSearchProps","_useState","useState","_useState2","slicedToArray","searchInput","setSearch","searchBy","searchByTitle","searchByBody","handleChange","e","target","FilterForm_objectSpread","defineProperty","newProps","onSubmit","preventDefault","onBlur","onChange","htmlFor","checked","loadData","asyncToGenerator","regenerator_default","mark","_callee","url","response","data","wrap","_context","prev","next","fetch","sent","json","abrupt","stop","_x","apply","this","getPostsWithUsers","_ref2","_callee2","users","postsWithUsers","_context2","loadingData_objectSpread","find","person","userId","postId","loadPosts","loading","isLoaded","setLoading","loadButton","disabled","then","components_FilterForm","components_PostList","ReactDOM","render","es","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.cab67cd1.chunk.js","sourcesContent":["import { createStore } from 'redux';\n\nexport const searchFields = {\n  t: 'title',\n  b: 'body',\n};\n\n// action types\nconst LOADING = 'loading';\nconst DELETE_POST = 'delete_post';\nconst DELETE_COM = 'delete_comment';\nconst SET_SEARCH_TEXT = 'set_search_text';\nconst SET_SEARCH_PROPS = 'set_search_props';\n\n// action creators\nexport const loading = value => ({ type: LOADING, value });\nexport const setSearchText = value => ({ type: SET_SEARCH_TEXT, value });\nexport const setSearchProps = value => ({ type: SET_SEARCH_PROPS, value });\nexport const delPost = value => ({ type: DELETE_POST, value });\nexport const delCom = value => ({ type: DELETE_COM, value });\n\n// selectors\n\nexport const getPosps = state => state.posts;\nexport const getSearchText = state => state.searchForm.searchText;\nexport const getSearchProps = state => state.searchForm.searchProps;\n\n// reducer\n\nconst posts = (state = [], action) => {\n  switch (action.type) {\n    case LOADING:\n      return action.value;\n    case DELETE_POST:\n      return state.filter(post => post.id !== action.value);\n    case DELETE_COM:\n      return state.map(post => ({\n        ...post,\n        comments: post.comments.filter(comment => comment.id !== action.value),\n      }));\n    default:\n      return state;\n  }\n};\n\nconst searchForm = (state = {\n  searchText: '',\n  searchProps: 'title',\n}, action) => {\n  switch (action.type) {\n    case SET_SEARCH_TEXT:\n      return {\n        ...state,\n        searchText: action.value,\n      };\n    case SET_SEARCH_PROPS:\n      return {\n        ...state,\n        searchProps: action.value,\n      };\n    default:\n      return state;\n  }\n};\n\nconst reducer = (state = {}, action) => ({\n  posts: posts(state.posts, action),\n  searchForm: searchForm(state.searchForm, action),\n});\n\nconst store = createStore(reducer);\n\nexport default store;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst User = ({ name, username, email, address }) => (\n  <div className=\"post-page__user\">\n    {name}\n    {username && `(${username})`}\n    <br />\n    {email}\n    <br />\n    {address && `City: ${address.city}`}\n    <br />\n    {address && `Street: ${address.street}`}\n  </div>\n);\n\nUser.propTypes = {\n  name: PropTypes.string,\n  username: PropTypes.string,\n  email: PropTypes.string.isRequired,\n  address: PropTypes.shape({\n    city: PropTypes.string,\n    street: PropTypes.string,\n  }),\n};\n\nUser.defaultProps = {\n  name: null,\n  username: null,\n  address: null,\n};\n\nexport default User;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { delCom } from './store';\nimport User from './User';\n\nconst Comment = ({ comment, deleteComment }) => (\n  <div className=\"comment-list__comment\">\n    <User email={comment.email} />\n    <div>\n      <h4>{comment.name}</h4>\n      <p>{comment.body}</p>\n      <button type=\"button\" onClick={() => deleteComment(comment.id)}>\n        Delete comment\n      </button>\n    </div>\n  </div>\n);\n\nComment.propTypes = {\n  comment: PropTypes.shape({\n    email: PropTypes.string.isRequired,\n    name: PropTypes.string,\n    body: PropTypes.string.isRequired,\n    id: PropTypes.number,\n  }).isRequired,\n  deleteComment: PropTypes.func.isRequired,\n};\n\nconst getMethods = dispatch => ({\n  deleteComment: value => dispatch(delCom(value)),\n});\n\nexport default connect(null, getMethods)(Comment);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Comment from '../Comment';\nimport './commentlist.css';\n\nconst CommentList = ({ comments }) => (\n  <div className=\"comment-list\">\n    <h3>Comments</h3>\n    <div className=\"comment-list__body\">\n      {comments && comments.map(currentComment => (\n        <Comment comment={currentComment} key={currentComment.id} />))\n      }\n    </div>\n  </div>\n);\n\nCommentList.propTypes = {\n  comments: PropTypes.arrayOf(\n    PropTypes.shape({\n      email: PropTypes.string,\n      name: PropTypes.string,\n      body: PropTypes.string,\n    })\n  ),\n};\n\nCommentList.defaultProps = {\n  comments: null,\n};\n\nexport default CommentList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { delPost } from '../store';\nimport User from '../User';\nimport CommentList from '../CommentList/CommentList';\nimport './post.css';\n\nconst Post = ({\n  title, body, comments, user, id, deletePost,\n}) => (\n  <div className=\"post-page\">\n    <div>\n      <User {...user} />\n\n      <button type=\"button\" onClick={() => deletePost(id)}>\n        Delete post\n      </button>\n    </div>\n\n    <div className=\"post-page__post\">\n      <h2>{title}</h2>\n      <div>{body}</div>\n      <CommentList comments={comments} />\n    </div>\n  </div>\n);\n\nPost.propTypes = {\n  title: PropTypes.string.isRequired,\n  body: PropTypes.string.isRequired,\n  comments: PropTypes.arrayOf(\n    PropTypes.shape({\n      email: PropTypes.string,\n      name: PropTypes.string,\n      body: PropTypes.string,\n    })\n  ),\n  id: PropTypes.number.isRequired,\n  user: PropTypes.shape({\n    name: PropTypes.string,\n    username: PropTypes.string,\n    email: PropTypes.string,\n    address: PropTypes.object,\n  }).isRequired,\n  deletePost: PropTypes.func.isRequired,\n};\n\nPost.defaultProps = {\n  comments: null,\n};\n\nconst getMethods = dispatch => ({\n  deletePost: value => dispatch(delPost(value)),\n});\n\nexport default connect(null, getMethods)(Post);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n  getPosps, getSearchProps, getSearchText, searchFields,\n} from './store';\nimport Post from './Post/Post';\n\nconst getFiltringFunk = (byField, value) => {\n  switch (byField) {\n    case searchFields.b:\n      return post => post.body.includes(value);\n    case searchFields.t + searchFields.b:\n      return post => post.title.includes(value) || post.body.includes(value);\n    default:\n      return post => post.title.includes(value);\n  }\n};\n\nconst PostList = ({ posts, searchText, searchProps }) => {\n  let filtredPosts = [];\n  if (searchText !== '') {\n    filtredPosts = posts.filter(getFiltringFunk(searchProps, searchText));\n  } else {\n    filtredPosts = [...posts];\n  }\n\n  return (\n    <div>\n      <div className=\"count-of-pages\">\n        {`${filtredPosts.length} of ${posts.length}`}\n      </div>\n      {\n        filtredPosts.map(post => (\n          <Post {...post} key={post.id} />\n        ))\n      }\n    </div>\n  );\n};\n\nPostList.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.shape({\n    title: PropTypes.string,\n    body: PropTypes.string,\n    comments: PropTypes.arrayOf(PropTypes.object),\n    id: PropTypes.number,\n    user: PropTypes.shape({\n      name: PropTypes.string,\n      username: PropTypes.string,\n      email: PropTypes.string.isRequired,\n      address: PropTypes.object,\n    }),\n  })).isRequired,\n  searchText: PropTypes.string.isRequired,\n  searchProps: PropTypes.string.isRequired,\n};\n\nconst getData = state => ({\n  posts: getPosps(state),\n  searchText: getSearchText(state),\n  searchProps: getSearchProps(state),\n});\n\nexport default connect(getData, {})(PostList);\n","/* eslint-disable no-shadow */\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {\n  getSearchText, getSearchProps, setSearchText, setSearchProps, searchFields,\n} from './store';\n\nconst FilterForm = ({\n  currentSearch, currentSProp, setFilterProps, setFiterText,\n}) => {\n  const [searchInput, setSearch] = useState(currentSearch);\n  let searchBy = {\n    searchByTitle: currentSProp.includes(searchFields.t),\n    searchByBody: currentSProp.includes(searchFields.b),\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (searchInput !== currentSearch) {\n      setFiterText(searchInput);\n    }\n  };\n\n  const handleChange = (e) => {\n    const { name } = e.target;\n    searchBy = {\n      ...searchBy,\n      [name]: !searchBy[name],\n    };\n\n    const newProps = (\n      `${searchBy.searchByTitle\n        ? searchFields.t\n        : ''}${searchBy.searchByBody\n        ? searchFields.b\n        : ''}`\n    );\n    setFilterProps(newProps);\n  };\n\n  const filterBlur = () => {\n    if (searchInput !== currentSearch) {\n      setFiterText(searchInput);\n    }\n  };\n\n  return (\n    <form\n      className=\"search-form\"\n      name=\"searchForm\"\n      action=\"\"\n      onSubmit={handleSubmit}\n    >\n      <input\n        className=\"search-form__input\"\n        name=\"searchInput\"\n        value={searchInput}\n        type=\"search\"\n        onBlur={filterBlur}\n        onChange={e => setSearch(e.target.value)}\n      />\n\n      <br />\n\n      <label htmlFor=\"checkTitle\">\n        <input\n          name=\"searchByTitle\"\n          type=\"checkbox\"\n          value=\"title\"\n          id=\"checkTitle\"\n          checked={searchBy.searchByTitle}\n          onChange={handleChange}\n        />\n        by post title\n      </label>\n\n      <label htmlFor=\"checkBody\">\n        <input\n          name=\"searchByBody\"\n          type=\"checkbox\"\n          value=\"body\"\n          id=\"checkBody\"\n          checked={searchBy.searchByBody}\n          onChange={handleChange}\n        />\n        by post text\n      </label>\n    </form>\n  );\n};\n\nFilterForm.propTypes = {\n  currentSearch: PropTypes.string.isRequired,\n  currentSProp: PropTypes.string.isRequired,\n  setFilterProps: PropTypes.func.isRequired,\n  setFiterText: PropTypes.func.isRequired,\n};\n\nconst getData = state => ({\n  currentSearch: getSearchText(state),\n  currentSProp: getSearchProps(state),\n});\n\nconst getMethods = dispatch => ({\n  setFiterText: value => dispatch(setSearchText(value)),\n  setFilterProps: value => dispatch(setSearchProps(value)),\n});\n\nexport default connect(\n  getData,\n  getMethods,\n)(FilterForm);\n","export const loadData = async(url) => {\n  const response = await fetch(url);\n  const data = await response.json();\n  return data;\n};\n\nexport const getPostsWithUsers = async() => {\n  const url = 'https://jsonplaceholder.typicode.com/';\n\n  const posts = await loadData(`${url}posts`);\n  const users = await loadData(`${url}users`);\n  const comments = await loadData(`${url}comments`);\n\n  const postsWithUsers = await posts.map(post => (\n    {\n      ...post,\n      user: users.find(person => person.id === post.userId),\n      comments: comments.filter(comment => post.id === comment.postId),\n    }\n  ));\n\n  return postsWithUsers;\n};\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport './App.css';\nimport { loading } from './components/store';\nimport PostList from './components/PostList';\nimport FilterForm from './components/FilterForm';\nimport { getPostsWithUsers } from './components/loadingData';\n\nconst App = ({ loadPosts }) => {\n  const [isLoaded, setLoading] = useState('Load');\n\n  const handleClick = (e) => {\n    const loadButton = e.target;\n\n    setLoading('Loading...');\n\n    loadButton.disabled = isLoaded === 'Loading...';\n\n    getPostsWithUsers().then((data) => {\n      loadPosts(data);\n      setLoading('Loaded');\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>List of posts</h1>\n      {\n        (isLoaded !== 'Loaded')\n          ? (\n            <button\n              type=\"button\"\n              className=\"load-button\"\n              onClick={handleClick}\n            >\n              {isLoaded}\n            </button>\n          )\n          : (\n            <div>\n              <FilterForm />\n              <PostList />\n            </div>\n          )\n      }\n    </div>\n  );\n};\n\nApp.propTypes = {\n  loadPosts: PropTypes.func.isRequired,\n};\n\nconst getMethods = dispatch => ({\n  loadPosts: value => dispatch(loading(value)),\n});\n\nexport default connect(null, getMethods)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport store from './components/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}